package Server.Backend;

import Server.Host.Host;
import Server.Host.LinuxHost;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MySQLDatabase extends Database{
    private Connection SQLConnection;

    private static Logger logger = LogManager.getLogger();

    public MySQLDatabase(String name, String username, String password, String ip) {
        super(name, username, password, ip);
    }


    /**
     * Opens a connection to a MySQL database using the information that was provided through the constructor.
     */
    @Override
    public void openConnection() {
        logger.info("Trying to open connection to the database");
        String connectionString = "jdbc:mysql://"+ this.getIp().getHostAddress() +"/" + this.getName() + "?" + "user=" + this.getUsername() + "&password=" + this.getPassword() + "&" + "useSSL=false" + "&serverTimezone=Europe/Copenhagen";

        if (!this.isConnectionOpen()) {
            try {
                logger.debug(connectionString);
                Class.forName("com.mysql.cj.jdbc.Driver");
                this.SQLConnection = DriverManager.getConnection(connectionString);
                logger.info("Connection was opened");
                this.setConnectionOpen(true);
            } catch (SQLException | ClassNotFoundException e) {
                logger.error("Connection to database failed");
                logger.error(e.getMessage());
                this.setConnectionOpen(false);
            }
        }
        else {
            logger.info("Backend connection is already opened");
        }
    }

    /**
     * Closes the connection to the database if it is currently open.
     */
    @Override
    public void closeConnection() {
        logger.info("Closing database connection");
        if (this.isConnectionOpen()) {
            logger.info("Trying to close");
            try {
                this.SQLConnection.close();
                logger.info("Connection was closed successfully");
            } catch (SQLException e) {
                logger.error(e.getMessage());
            }
        }else{
            logger.info("Connection is already closed");
        }
    }

    /**
     * Tests if the connection to the database is open.
     * @return returns true if the connection is open and false if it is closed.
     */
    @Override
    public boolean isConnectionOpen() {
        logger.debug("Verifying if the connection is open");

        if (this.SQLConnection != null) {
            try {
                logger.debug("SQL connection isClose: " + this.SQLConnection.isClosed());
                logger.debug("SQL connection is opened");
                return !this.SQLConnection.isClosed();
            } catch (SQLException e) {
                logger.error(e.getMessage());
                return false;
            }
        }
        else{
            logger.debug("SQL connection is closed");
            return false;
        }
    }

    /**
     * Executes a query to the database
     * @param query query is the string representation of the query
     * @return returns a resultset that was generated by the query
     * @throws SQLException Exception is thrown if the execution of a query fails.
     */
    private ResultSet executeQuery(String query) throws SQLException {
            logger.debug("Executing this query: " + query);
            PreparedStatement preparedStatement = this.SQLConnection.prepareStatement(query);
            return preparedStatement.executeQuery();
    }

    @Override
    public List<Host> getAllHosts() {
        List<Host> hosts = new ArrayList<>();
        String queryString =    "SELECT `ID`,`Name`,`IPv41`,`IPv42`,`IPv43`,`IPv44`" +
                                "FROM `bidsm`.`Hosts` " +
                                "LIMIT 1000;";
        try {
            ResultSet resultSet = this.executeQuery(queryString);

            while (resultSet.next()){
                int ID = resultSet.getInt("ID");
                String name = resultSet.getString("Name");
                String IP = resultSet.getString("IPv41") + "." +
                            resultSet.getString("IPv42") + "." +
                            resultSet.getString("IPv43") + "." +
                            resultSet.getString("IPv44");
                hosts.add(new LinuxHost(ID, IP, name));
            }


        } catch (SQLException e) {
            logger.info(e.getMessage());
        }

        return hosts;
    }

    @Override
    public void updateHost(Host host) {
        String queryString =    "SELECT `ID`,`Name`,`IPv41`,`IPv42`,`IPv43`,`IPv44`" +
                                "FROM `bidsm`.`Hosts` " +
                                "WHERE ID = " + host.getID();

        try {
            ResultSet resultSet = this.executeQuery(queryString);
            resultSet.absolute(0);
            resultSet.updateString("Name", host.getName());
            resultSet.updateRow();
        } catch (SQLException e) {
            logger.info(e.getMessage());
        }

    }
}
